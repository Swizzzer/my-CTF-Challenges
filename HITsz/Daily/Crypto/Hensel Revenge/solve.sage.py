

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_30 = Integer(30); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_405 = Integer(405); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4)
from Crypto.Util.number import *
import ast


def hensel_solve(f, p, r):
    """
    Solves polynomial roots in the ring Zmod(p**r) using Hensel's lifting method.

    Parameters:
    f (polynomial): The polynomial equation.
    p (int): A prime number.
    r (int): The exponent.

    Raises:
    ValueError: If p is not a prime number or if f has no roots.
    """
    if not is_prime(p):
        raise ValueError("p must be a prime")
    f = f.change_ring(Zp(p))
    F = f.change_ring(Zmod(pow(p, r)))
    P = Zp(p, max(_sage_const_30 , r))
    Fd = derivative(F)
    origin_roots = f.roots()
    if not len(origin_roots):
        raise ValueError("f has no roots")
    ans = set()
    for x in origin_roots:
        x_k = ZZ(x[_sage_const_0 ])
        flag = _sage_const_0 
        for k in range(_sage_const_1 , r):
            if Fd(x_k) == P(_sage_const_0 ):
                if Zmod(pow(p, r))(f(x_k)) == _sage_const_0 :
                    continue
                else:
                    flag = _sage_const_1 
                    break
            else:
                x_k = Zmod(pow(p, r))(P(x_k) - P(F(x_k)) / P(Fd(x_k)))
        if not flag:
            ans.update({x_k})
    return list(ans)


with open("output.txt") as f:
    p = ast.literal_eval(f.readline())
    c = ast.literal_eval(f.readline())

PR = PolynomialRing(Zmod(p**_sage_const_3 ), names=('x',)); (x,) = PR._first_ngens(1)
f = x**_sage_const_30 +_sage_const_405 *x**_sage_const_2 -_sage_const_4 *x+_sage_const_1 -c
print(f.change_ring(Zmod(p)).roots())
print(hensel_solve(f, p, _sage_const_3 ))
m = int(hensel_solve(f, p, _sage_const_3 )[_sage_const_0 ])
print(long_to_bytes(m))

